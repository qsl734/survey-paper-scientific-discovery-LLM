{
  "objective": {
    "answer": "The primary objective of the paper is to propose a novel evolutionary paradigm, Evolution of Heuristic (EoH), that leverages Large Language Models (LLMs) and Evolutionary Computation (EC) methods for Automatic Heuristic Design (AHD).",
    "evidence": "This paper proposes Evolution of Heuristic (EoH), a novel evolutionary paradigm that leverages both Large Language Models (LLMs) and Evolutionary Computation (EC) methods for Automatic Heuristic Design (AHD)."
  },
  "knowledge_gap": {
    "answer": "The paper addresses the gap in efficient automatic heuristic design, which is traditionally labor-intensive and requires expert knowledge.",
    "evidence": "However, manual design of heuristics can be often very labour extensive and requires rich working experience and knowledge."
  },
  "novelty": {
    "answer": [
      "EoH evolves both thoughts and codes using LLMs for automatic heuristic design.",
      "The method introduces prompt strategies to guide LLMs in generating diverse and effective heuristics.",
      "EoH demonstrates state-of-the-art performance in AHD with fewer LLM queries compared to existing methods."
    ],
    "evidence": [
      "We propose EoH, a novel paradigm that uses LLMs to evolve both thoughts and codes for the automatic design of heuristics.",
      "We develop several simple yet effective prompt strategies to guide LLMs toward generating more diverse and effective heuristics.",
      "EoH uses much fewer queries to LLMs than FunSearch on online bin packing problem."
    ]
  },
  "inspirational_papers": {
    "answer": "- Romera-Paredes et al. (2024) FunSearch inspired the evolutionary framework used in EoH. (Methodological precursors)",
    "evidence": "One representative work is FunSearch (Romera-Paredes et al., 2024). It models AHD as a search problem in the space of functions, where each function is a heuristic represented by a program and it uses LLMs in an evolutionary framework to iteratively improve the quality of generated functions."
  },
  "method": {
    "steps": [
      {
        "step": "Initialize the population of heuristics using LLMs.",
        "input": "LLMs, initialization prompt",
        "output": "Initial population of heuristics",
        "evidence": "Initialize the population P of N heuristics h1, . . . , hN by prompting LLMs using Initialization prompt."
      },
      {
        "step": "Generate new heuristics using evolutionary prompt strategies.",
        "input": "Current population of heuristics, LLMs, evolutionary prompts",
        "output": "New heuristics",
        "evidence": "Five Evolution prompt strategies are used simultaneously to generate 5N new heuristics."
      },
      {
        "step": "Evaluate the new heuristics on problem instances.",
        "input": "New heuristics, problem instances",
        "output": "Fitness values for new heuristics",
        "evidence": "Evaluate the new heuristic on a set of evaluation instances to determine its fitness value."
      },
      {
        "step": "Select the best heuristics to form the next generation.",
        "input": "Current population of heuristics, fitness values",
        "output": "Next generation population",
        "evidence": "Select the N best individual heuristics from the current population to form a population for the next generation."
      }
    ],
    "tools": [
      {
        "name": "LLMs",
        "description": "Used for generating heuristic descriptions and code implementations.",
        "evidence": "We leverage a linguistic description, referred to as a thought, to represent a high-level idea (i.e., key logic) of a heuristic. Then, a corresponding code representation, i.e., an executable implementation of a heuristic, is generated via an LLM."
      }
    ],
    "benchmark_datasets": [
      {
        "name": "Weibull instances",
        "data_description": "Instances of the online bin packing problem with different sizes and capacities.",
        "usage": "Used for evaluation during heuristic evolution.",
        "evidence": "The instances that are used for evaluation during heuristic evolution are five Weibull instances of size 5k with a capacity of 100."
      },
      {
        "name": "TSPLib",
        "data_description": "A library of sample instances for the Traveling Salesman Problem.",
        "usage": "Used to evaluate the performance of heuristics on TSP.",
        "evidence": "We list the gap (%) to the best-known solutions on six instances from TSPLib."
      },
      {
        "name": "Taillard instances",
        "data_description": "Instances for flow shop scheduling problems with varying numbers of jobs and machines.",
        "usage": "Used to evaluate the performance of heuristics on FSSP.",
        "evidence": "Table 3 lists the experimental results of different heuristics on Taillard instances with the number of jobs (n) ranging from 20 to 100 and the number of machines (m) ranging from 10 to 20."
      }
    ],
    "evaluation_metrics": [
      {
        "name": "Average gap to lower bound",
        "purpose": "Measures the efficiency of bin packing heuristics.",
        "application": "Used to compare heuristics on online bin packing problem.",
        "evidence": "Table 1 presents the average gaps to the lower bounds, where the best results are highlighted in bold."
      },
      {
        "name": "Average gap to best-known solutions",
        "purpose": "Measures the efficiency of TSP heuristics.",
        "application": "Used to compare heuristics on TSPLib instances.",
        "evidence": "We list the gap (%) to the best-known solutions on six instances from TSPLib."
      },
      {
        "name": "Average relative makespan",
        "purpose": "Measures the efficiency of scheduling heuristics.",
        "application": "Used to compare heuristics on Taillard instances.",
        "evidence": "Table 3 lists the experimental results of different heuristics on Taillard instances with the number of jobs (n) ranging from 20 to 100 and the number of machines (m) ranging from 10 to 20."
      }
    ]
  },
  "method_type": {
    "methods": [
      {
        "name": "Hypothesis or Idea Generation",
        "description": "The system produces candidate hypotheses or new research ideas from prior knowledge or external input.",
        "evidence": "We propose an evolutionary framework to simultaneously evolve the thoughts and codes of heuristics in a cooperative manner."
      },
      {
        "name": "Experimental design generation",
        "description": "The approach includes producing experimental protocols, configurations, or evaluation strategies.",
        "evidence": "We comprehensively evaluate EoH on three widely-studied combinatorial optimization benchmark problems."
      }
    ]
  },
  "subject_area": {
    "areas": [
      {
        "name": "Applied Sciences & Engineering",
        "description": "The paper develops a novel method for automatic heuristic design using LLMs and evolutionary computation.",
        "evidence": "This paper proposes Evolution of Heuristic (EoH), a novel evolutionary paradigm that leverages both Large Language Models (LLMs) and Evolutionary Computation (EC) methods for Automatic Heuristic Design (AHD)."
      }
    ]
  },
  "performance_summary": {
    "performance_summary": [
      {
        "summary": "EoH outperforms commonly used handcrafted heuristics and other recent AHD methods including FunSearch on combinatorial optimization problems.",
        "evidence": "Experiments on three widely studied combinatorial optimization benchmark problems demonstrate that EoH outperforms commonly used handcrafted heuristics and other recent AHD methods including FunSearch."
      }
    ],
    "baselines": [
      {
        "name": "FunSearch",
        "description": "A recent method for automatic heuristic design using LLMs.",
        "evidence": "FunSearch has been applied on several problems with great success."
      },
      {
        "name": "First Fit and Best Fit",
        "description": "Commonly used handcrafted heuristics for bin packing.",
        "evidence": "Methods in comparison include human hand-crafted heuristics: the first fit and best fit heuristics."
      }
    ],
    "benchmark_datasets": [
      {
        "name": "Weibull instances",
        "data_description": "Instances of the online bin packing problem with different sizes and capacities.",
        "usage": "Used for evaluation during heuristic evolution.",
        "evidence": "The instances that are used for evaluation during heuristic evolution are five Weibull instances of size 5k with a capacity of 100."
      },
      {
        "name": "TSPLib",
        "data_description": "A library of sample instances for the Traveling Salesman Problem.",
        "usage": "Used to evaluate the performance of heuristics on TSP.",
        "evidence": "We list the gap (%) to the best-known solutions on six instances from TSPLib."
      },
      {
        "name": "Taillard instances",
        "data_description": "Instances for flow shop scheduling problems with varying numbers of jobs and machines.",
        "usage": "Used to evaluate the performance of heuristics on FSSP.",
        "evidence": "Table 3 lists the experimental results of different heuristics on Taillard instances with the number of jobs (n) ranging from 20 to 100 and the number of machines (m) ranging from 10 to 20."
      }
    ],
    "evaluation_metrics": [
      {
        "name": "Average gap to lower bound",
        "purpose": "Measures the efficiency of bin packing heuristics.",
        "application": "Used to compare heuristics on online bin packing problem.",
        "evidence": "Table 1 presents the average gaps to the lower bounds, where the best results are highlighted in bold."
      },
      {
        "name": "Average gap to best-known solutions",
        "purpose": "Measures the efficiency of TSP heuristics.",
        "application": "Used to compare heuristics on TSPLib instances.",
        "evidence": "We list the gap (%) to the best-known solutions on six instances from TSPLib."
      },
      {
        "name": "Average relative makespan",
        "purpose": "Measures the efficiency of scheduling heuristics.",
        "application": "Used to compare heuristics on Taillard instances.",
        "evidence": "Table 3 lists the experimental results of different heuristics on Taillard instances with the number of jobs (n) ranging from 20 to 100 and the number of machines (m) ranging from 10 to 20."
      }
    ]
  },
  "benchmark_dataset": {
    "name": "TSPLib",
    "description": "A library of sample instances for the Traveling Salesman Problem.",
    "usage": "Used to evaluate the performance of heuristics on TSP.",
    "evidence": "We list the gap (%) to the best-known solutions on six instances from TSPLib."
  },
  "limitations": {
    "limitations": [
      {
        "name": "Computational Resource Requirement",
        "description": "The method requires a significant number of LLM queries, which may not be practical for all users.",
        "evidence": "FunSearch is computationally expensive and usually needs to generate millions of programs (i.e., queries to LLMs) to identify an effective heuristic function, which is not very practical for many users."
      }
    ]
  },
  "future_directions": {
    "future_directions": [
      {
        "name": "Pre-trained domain LLM",
        "description": "Study how to train an LLM specifically for automatic algorithm design using domain knowledge.",
        "evidence": "Instead of using a general pre-trained LLM with linguistic and code generation capability, it is worthwhile studying how to train an LLM specifically for automatic algorithm design."
      },
      {
        "name": "Understanding of search space of heuristics",
        "description": "Study and understand search spaces of heuristics for establishing theory and basic principles for automatic design of algorithms.",
        "evidence": "It should be very important to study and understand search spaces of heuristics for further establishing theory and basic principles for the automatic design of algorithms."
      }
    ]
  },
  "resource_link": {
    "answer": "https://github.com/FeiLiu36/EoH",
    "evidence": "The source code can be found in https://github.com/FeiLiu36/EoH."
  }
}